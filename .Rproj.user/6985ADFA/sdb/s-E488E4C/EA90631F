{
    "contents" : "\n### set up parameters for the simulation test survival & migration function with two\n### locations ### general parameters ###\nn_loc <- 5  ### number of locations\nn_times <- 100  ### number of years\nn_stages <- 10  ### number of stages including eggs and recruits\nstage_mat <- 3  ### stage # that indicates maturity \n\n### 9 x L mortality matrix (can also be a single number or a single row with L\n### columns)\nmort <- matrix(0.334, ncol = n_loc, nrow = length((stage_mat - 1):(n_stages)))\n\nmort_mat <- array(0, dim = c(n_stages - 1, n_stages - 1, n_loc))\n\n### create identifier of matrix entries that correspond to mortality for quick\n### replacement in the array\nmort_mat_id <- array(matrix(1:n_stages^2, ncol = n_stages) %in% c(diag(matrix(1:n_stages^2, \n                                                                              ncol = n_stages)[-c(1), ]), n_stages^2), dim = c(n_stages, n_stages, n_loc))[-1, \n                                                                                                                                                           -1, ]\n\n### fecundity at age 3-10\nfec_at_age <- fecundity_age(stage_mat:(n_stages))\n\n### biomass at age 3-10 in tons\ntons_at_age <- LVBweight(stage_mat:(n_stages))/1000\n\n### straying probability matrix (must be square with L x L dimensions)\nspat_scale <- 0.3\n\n### matrix of mean stray probabilities\nstray_probs <- spat_cor_mat(n_loc, spat_scale = spat_scale, sumto1 = TRUE)\n\n### dirichlet scale parameter higher = less stochastic probabiliies\nC <- 1000\n\n### stochastic realizations of the stray matrix for each year using the dirichlet\n### distribution\nCrand <- array(NA, dim = c(n_loc, n_loc, n_times))\nfor (i in 1:n_times) {\n  Crand[, , i] <- apply(matrix(as.integer(stray_probs * C), ncol = n_loc), 2, rdirichlet, \n                        n = 1)\n}\n\n### BH stock-recruit parameters-must be either 1) a single value or 2) a vector of\n### length L\nh = 0.82\nB0 = 60000  # tons in central coast in 2013/14\nS0 = B0 * 1000/mean(LVBweight(3:10))  # convert B0 to mean number of fish\nE0 = S0 * fecundity_age(9)  ### eggs at 6 years old (scaled in millions)\nR0 = 5e+08  # in millions\nalpha <- (E0 * (1 - h))/(4 * h * R0)\nbeta <- (5 * h - 1)/(4 * h * R0)\n\n### illustrate deterministic SR\nsim_eggs <- seq(from = 1, to = E0, length.out = 1000)\nplot(BH(sim_eggs, alpha=alpha,beta= beta)/1e+06 ~ I(sim_eggs/589400365), \n     type = \"l\", ylim = c(0, 2000), \n     xlab = c(\"Eggs (Millions)\"), ylab = \"Age 2 recruits (millions)\")\n\n### spatiotemporal recruitment deviation parameters\nphi = 0.5  ### first order autocorrelation \nspat_sd = 2  ### gaussian spatial correlation paramete\nsite_sd = 0.5  ### overall log-scale recruitment standard deviation \n\n### create matrices and vectors from parameters ### create spatiotemporal\n### recruitment errors\nerrors <- spat_temp_ts(n_iter = n_times, n_loc = n_loc, site_sd = site_sd, spat_sd = spat_sd, \n                       phi = phi)\nerrors$cor_mat  ### correlation matrix among sites in log-scale recruitment error \nerrors$pacf  ### within site partial-autocorrelation function  \nerror_mat <- errors$ts  ### save the ts for use in the simulation \n\n\n### initial conditions ### create the data arrays\nd1 <- c(0, 2:10)\nd2 <- c(paste(\"Location\", 1:n_loc, sep = \"_\"))\nd3 <- 1:n_times\n\n## set up the abundance array\nX <- array(as.numeric(NA), dim = c(10, n_loc, n_times), dimnames = list(d1, d2, d3))\nX[, , 1] <- matrix(c(rep(1e+08, 10), rep(0, each = 40)), ncol = n_loc, byrow = F)\nX[, , 2] <- matrix(rep(1e+08, each = n_loc), ncol = n_loc, byrow = T)\n\n## set up the adult biomass array\nB <- array(NA, dim = c(n_loc, n_times, 3), dimnames = list(d2, d3, c(\"Actual\", \"Observed\", \n                                                                     \"Forecast\")))\nB[, 1, ] <- tons_at_age %*% X[3:10, , 1]/1000\nB[, 2, ] <- tons_at_age %*% X[3:10, , 2]/1000\n\n## set up the Forecast adult biomass array\nBF <- array(NA, dim = c(n_loc, n_times, 3), dimnames = list(d2, d3, c(\"True\", \"Observed\", \n                                                                      \"Estimate\")))\nBF[, 1, ] <- tons_at_age %*% X[3:10, , 1]/1000\nBF[, 2, ] <- tons_at_age %*% X[3:10, , 2]/1000\n\nobs_sd <- 0.3\n\n### project the population with stochastic recruitment ###\nsystem.time(for (i in 3:n_times) {\n  mort_mat[mort_mat_id] <- exp(-mort)\n  \n  X[, , i] <- surv_stray_recr(E0 = E0, h = h, R0 = R0, fec_at_age = fec_at_age, \n                              n_loc = n_loc, n_stages = n_stages, stage_mat = stage_mat, eggs = X[1, , i - \n                                                                                                    2], X = X[(stage_mat - 1):n_stages, , i - 1], mort_mat = mort_mat, stray_mat = Crand[, \n                                                                                                                                                                                         , i - 1], errors = errors$ts[i - 1, ])\n  \n  B[, i, 1] <- tons_at_age %*% X[3:10, , i]/1000\n  B[, i, 2] <- B[, i, 1] * exp(rnorm(n_loc, 0, obs_sd) - 0.5 * obs_sd^2)\n  B[, i, 3] <- aaply(log(B[, 2:i, 2]), 1, sd1 = obs_sd, sd2 = 0.2, fit = FALSE, \n                     kalman_assess)\n})\n\n### create a dataframe for plotting\ndf_ts <- as.data.frame.table(X)\nnames(df_ts) <- c(\"Age\", \"Location\", \"Time\", \"Number\")\ndf_ts$Time <- as.numeric(as.character(df_ts$Time))\ndf_ts$Age <- as.numeric(as.character(df_ts$Age))\ndf_ts$Stage <- with(df_ts, ifelse(Age == 2, \"Recruits\", ifelse(Age == 0, \"Eggs\", \"Adults\")))\n\n### plot the time series of adults plotting options\nplot.options <- theme(strip.background = element_rect(fill = NA, colour = NA), \n                      panel.grid.minor = element_line(colour = NA), \n                      panel.grid.major = element_line(colour = NA), \n                      legend.key = element_blank(), \n                      legend.key.size = unit(0.6, \"cm\"), legend.position = \"right\", \n                      legend.direction = \"vertical\", \n                      panel.background = element_rect(fill = NA, colour = \"black\"),\n                      legend.key.width = unit(1.5, \"lines\"), \n                      panel.margin = unit(1,  \"lines\"),\n                      legend.background = element_rect(fill = NA, colour = NA),\n                      plot.background = element_rect(fill = NA), \n                      plot.margin = unit(c(0.075, 0.075, 0.075, 0.2), \"inches\"))\n\n### generate the plot ###\nggplot(aes(Time, Number/1e+06), data = subset(df_ts, Stage != \"Eggs\")) + \n  geom_line(aes(colour = factor(Age))) + \n  facet_grid(Stage ~ Location) + \n  plot.options + \n  ylab(\"Number (Millions)\") + scale_x_continuous(expand = c(0, 0))\n\ndf_ts2 <- as.data.frame.table(B)\nnames(df_ts2) <- c(\"Location\", \"Time\", \"Source\", \"Tons\")\ndf_ts2$Time <- as.numeric(as.character(df_ts2$Time))\n### generate the plot ###\nggplot(aes(Time, Tons), data = df_ts2) + \n  geom_line(aes(colour = Source, linetype = Source),  size = 1) + \n  scale_linetype_manual(values = c(1, 3, 1)) + \n  plot.options + facet_grid(Location ~ .) + \n  scale_colour_manual(values = c(\"red\", \"black\", \"blue\")) + \n  ylab(\"Tons (Thousands)\") + \n  scale_x_continuous(expand = c(0, 0))\n\n### correlation in recruitment among sites\ncor(t(X[2, , ]))\n\n### correlation in biomass among sites\ncor(t(B[, , 1]))\n\n\n\n\n",
    "created" : 1424899077295.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2075729186",
    "id" : "EA90631F",
    "lastKnownWriteTime" : 1424899435,
    "path" : "~/Copy/Post-Doc/Rmetapop/Rmetapop/inst/examples/survexample1.R",
    "project_path" : "Rmetapop/inst/examples/survexample1.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}