{
    "contents" : "\n#' Discrete survival, straying, and recruitment projection.\n#' @param stray_mat a square L x L stray matrix. \n#' @param mort_mat an S x L mortality matrix OR a vector of length L OR a single value.\n#' @param fec_at_age a vector or matrix of fecundity at age including only mature stages.\n#' @param eggs a vector of eggs associated with the next years cohort (fed into the stock recruit relationship).\n#' @param E0 egg production at B0.\n#' @param h steepness.\n#' @param R0 recruitment at B0.\n#' @param stage_maturity stage class at maturity.\n#' @param errors a vector of length L or single value of recruitment deviations.\n#' @param X an S x L matrix of initial abundances of each stage (S) at each location (L).\n#' @param n_stages number of stage classes.\n#' @param n_log number of locations. \n#' @example /inst/examples/survexample1.R\n#' @description Generates a single projection including survival followed by straying and reproduction using a matrix algebra in discrete time.\n#' @seealso surv_stray_recr_ode\n\nsurv_stray_recr <- function(stray_mat, mort_mat, fec_at_age, \n                            eggs, E0 = E0, h = h, R0 = R0, \n                            stage_maturity, errors = 0, X, n_stages, n_loc) {\n    \n    ### create empty array\n    S <- array(as.numeric(NA), dim = c(n_stages, n_loc))\n    \n    if (length(dim(mort_mat)) > 2) {\n        ### fill in mortality at age\n        for (j in 1:5) {\n            S[(stage_maturity - 1):n_stages, j] <- mort_mat[, , j] %*% X[, j]\n        }\n    } else {\n        S[(stage_maturity - 1):n_stages, ] <- mort_mat %*% X\n    }\n    S[(stage_maturity - 1):n_stages, ] <- S[2:n_stages, ] %*% t(stray_mat)\n    S[1, ] <- fec_at_age %*% S[stage_maturity:n_stages, ]\n    S[2, ] <- mapply(BH, E = eggs, E0 = E0, h = h, R0 = R0) * exp(errors)\n    return(S)\n}\n#' Continuous time survival, straying, and harvest with discrete recruitment\n#' @param stray a square L x L stray matrix. \n#' @param Z an S x L instantaneous mortality matrix OR a vector of length L OR a single value.\n#' @param fec_at_age a vector or matrix of fecundity at age including only mature stages.\n#' @param eggs a vector of eggs associated with the next years cohort (fed into the stock recruit relationship).\n#' @param E0 egg production at B0.\n#' @param h steepness.\n#' @param R0 recruitment at B0.\n#' @param stage_maturity stage class at maturity.\n#' @param errors a vector of length L or single value of recruitment deviations.\n#' @param n_stages number of stage classes.\n#' @param n_loc number of locations. \n#' @param inst_h a matrix vector or single value with instantaneous fishing mortality\n#' @param X0 an S x L matrix of initial abundances of each stage (S) at each location (L).\n#' @param method the method of numerical integration (defaults to \"lsoda\").\n#' @example /inst/examples/survexample_ode.R\n#'@description Generates a single projection including simultaneous survival, straying and harvest using a system of ordinary differential equations followed by discrete reproduction \nsurv_stray_recr_ode <- function(stray, Z, fec_at_age, eggs, \n                                E0 = E0, h = h, R0 = R0, \n                                stage_maturity, errors = 0, \n                                n_loc , n_stages,\n                                inst_h = 0, X0, method = \"lsoda\") {\n        S <- n_stages - 1\n        L <- n_loc\n\n    X1 <- array(as.numeric(NA), dim = c(n_stages, n_loc))\n    \n    col <- rep(1:(S * L), L)\n    row <- rep(c(1:S), L * L) + rep(0:(L - 1), each = S * L) * S\n    \n    Zmat <- diag(as.vector(-Z))\n    Smat <- matrix(simple_triplet_matrix(row, col, rep(t(stray), each = S)), ncol = 45)\n    diag(Smat) <- rep(diag(stray), each = S) - 1\n    Fmat <- diag(as.vector(inst_h), ncol = (L * S), nrow = (L * S))\n    \n    A <- rbind(cbind(Zmat + Smat, matrix(0, nrow = 45, ncol = 45)), cbind(Fmat, matrix(0, nrow = 45, ncol = 45)))\n    \n    inits <- matrix(X0)\n    \n    ### generate the survivors and harvest totals ###\n    fin <- array(t(ode(y = c(X0, rep(0, (S * L))), times = c(0, 1), \n                       func = linear_odes, parms = A, method = method)[2, -1]), \n                 dim = c(S, L, 2))\n    \n    ### split survivors and harvests ###\n    harvest <- fin[, , 2]\n    survivors <- fin[, , 1]\n    survivors[S-1, ] <- survivors[S-1, ] + survivors[S, ]\n    \n    X1[3:10,] <- survivors[1:8, ]\n    X1[1, ] <- fec_at_age %*% X1[stage_maturity:n_stages, ]\n    X1[2, ] <- mapply(BH, E = eggs, E0 = E0, h = h, R0 = R0) * exp(errors)\n    return(list(X = X1, harvest = harvest))\n} \n",
    "created" : 1424898896562.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "747764973",
    "id" : "AB21DCC",
    "lastKnownWriteTime" : 1424905916,
    "path" : "~/Copy/Post-Doc/Rmetapop/Rmetapop/R/survival_straying.R",
    "project_path" : "Rmetapop/R/survival_straying.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}